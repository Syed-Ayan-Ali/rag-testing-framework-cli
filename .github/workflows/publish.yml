name: Publish to npm

on:
  # Trigger on release creation
  release:
    types: [published]
    
  # Trigger on git tags (for version releases)
  push:
    tags:
      - 'v*'

  # Allow manual triggering
  workflow_dispatch:

# Add permissions for GitHub token
permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Debug environment
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Registry: $(npm config get registry)"
          echo "Package name: $(node -p "require('./package.json').name")"
          echo "Package version: $(node -p "require('./package.json').version")"
          echo "Git ref: ${{ github.ref }}"
          echo "Event name: ${{ github.event_name }}"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests (if any)
        run: npm test --if-present
        
      - name: Build package
        run: npm run build
        
      - name: Check package contents
        run: npm pack --dry-run
        
      - name: Check npm authentication
        run: |
          echo "Testing npm authentication..."
          npm whoami || (echo "❌ Not authenticated to npm" && exit 1)
          echo "✅ Authenticated to npm as: $(npm whoami)"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Check if version already exists
        id: check_version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          echo "🔍 Checking: $PACKAGE_NAME@$PACKAGE_VERSION"
          
          # Check if package exists at all
          if ! npm view "$PACKAGE_NAME" 2>/dev/null; then
            echo "📦 Package '$PACKAGE_NAME' does not exist on npm yet"
            echo "already_exists=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if this specific version exists
          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version 2>/dev/null; then
            echo "❌ Version $PACKAGE_VERSION already exists on npm"
            echo "📋 Existing versions:"
            npm view "$PACKAGE_NAME" versions --json
            echo "already_exists=true" >> $GITHUB_OUTPUT
          else
            echo "✅ Version $PACKAGE_VERSION does not exist, proceeding with publish"
            echo "📋 Existing versions:"
            npm view "$PACKAGE_NAME" versions --json
            echo "already_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
      - name: Publish to npm
        if: steps.check_version.outputs.already_exists == 'false'
        run: |
          echo "🚀 Publishing to npm..."
          echo "Package: $(node -p "require('./package.json').name")"
          echo "Version: $(node -p "require('./package.json').version")"
          npm publish --verbose
          echo "✅ Successfully published to npm!"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Skip publish (version exists)
        if: steps.check_version.outputs.already_exists == 'true'
        run: echo "Skipping publish - version already exists on npm"
          
      - name: Debug GitHub token permissions
        if: startsWith(github.ref, 'refs/tags/') && steps.check_version.outputs.already_exists == 'false'
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "Ref name: ${{ github.ref_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Token permissions check..."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create GitHub release (if tag push and published)
        if: startsWith(github.ref, 'refs/tags/') && steps.check_version.outputs.already_exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## 🚀 Release ${{ github.ref_name }}
            
            ### Changes in this Release
            - ✅ Automated release from tag ${{ github.ref_name }}
            - 📦 Package published to npm
            - 🧪 All tests passed
            
            ### Installation
            ```bash
            npm install -g rag-cli-tester
            ```
            
            ### Usage
            ```bash
            rag-test --help
            ```
          draft: false
          prerelease: false
